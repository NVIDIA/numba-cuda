on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
      branch:
        type: string
      date:
        type: string
      sha:
        type: string
      repo:
        type: string
      script:
        type: string
        default: "ci/test_conda.sh"
      run_codecov:
        type: boolean
        default: true
      matrix:
        type: string
        required: true
      matrix_filter:
        type: string
        default: "."
      container-options:
        required: false
        type: string
        default: "-e _NOOP"

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ inputs.build_type }}
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Python Test Matrix
        id: compute-matrix
        env:
          TEST_MATRIX: ${{ inputs.matrix }}
        run: |
          set -eo pipefail

          MATRIX="$(
            yq -n -o json 'env(TEST_MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  tests:
    name: ${{ matrix.CUDA_VER }}, ${{ matrix.PY_VER }}, ${{ matrix.ARCH }}, ${{ matrix.LINUX_VER }}, ${{ matrix.GPU }}
    needs: compute-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-gpu-${{ matrix.GPU }}-${{ matrix.DRIVER }}-1"
    env:
      RAPIDS_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      RAPIDS_COVERAGE_DIR: ${{ github.workspace }}/coverage-results
      RAPIDS_TESTS_DIR: ${{ github.workspace }}/test-results
    container:
      image: rapidsai/ci-conda:cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}
      options: ${{ inputs.container-options }}
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        name: conda-repo-py${{ matrix.PY_VER }}-${{ matrix.ARCH }}
      - name: Display structure of downloaded files
        run: ls -R
      - name: Standardize repository information
        run: |
          echo "RAPIDS_REPOSITORY=${{ inputs.repo || github.repository }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_SHA=$(git rev-parse HEAD)" >> "${GITHUB_ENV}"
          echo "RAPIDS_REF_NAME=${{ inputs.branch || github.ref_name }}" >> "${GITHUB_ENV}"
          echo "RAPIDS_NIGHTLY_DATE=${{ inputs.date }}" >> "${GITHUB_ENV}"
      - name: Setup proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main
        continue-on-error: true
      - name: Python tests
        run: ${{ inputs.script }}
        env:
          GH_TOKEN: ${{ github.token }}
          CUDA_VER: ${{ matrix.CUDA_VER }}
      - name: Generate test report
        uses: test-summary/action@v2.4
        with:
          paths: "${{ env.RAPIDS_TESTS_DIR }}/*.xml"
        if: always()
      - name: Run codecov
        if: inputs.run_codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          codecovcli \
            -v \
            upload-process \
            -C ${{ github.sha }} \
            -s "${RAPIDS_COVERAGE_DIR}" \
            --handle-no-reports-found
      - name: Upload additional artifacts
        if: "!cancelled()"
        run: rapids-upload-artifacts-dir cuda${RAPIDS_CUDA_VERSION%%.*}_$(arch)_py${RAPIDS_PY_VERSION//.}
